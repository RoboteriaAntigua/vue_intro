#Conceptos previos:
    un computed: es uno mas como data, methods, pero que se activa automaticamente cuando cambia el valor
    de una variable de igual nombre

############################ Componentes dinamicos #######################################################
    Seria una forma de renderizar un componente, usando computed. O alternar entre componentes como en el ejemplo
    toogle-component.
    Resumen con :is renderizamos componentes:
            <button @click="alternar = !alternar">toogle</button>  //alternar es una variable
            <component :is="dinamicComp"></component>
            export default {
                        data(){
                            return {
                                alternar:false
                            }
                        },
                        computed: {
                            dinamicComp () {
                                if (this.alternar){
                                    return 'comp-one'
                                }
                                else {
                                    return 'comp-two'
                                }
                            }
                        }
                    }


######### ruteo con active components ####################
  #  Tambien podemos hacer una especie de ruteo de componentes sin usar un router:
        <template>
            <p>Choose what part of this page you want to see:</p>
            <button @click="activeComp = 'home'    "> home      </button>
            <button @click="activeComp = 'cultural'"> cultural  </button>
            <button @click="activeComp = 'acercade'"> acerca de </button>
            <button @click="activeComp = 'contacto'"> Contacto  </button>
            <div>
              <component :is="activeComp"></component>
            </div>
        </template>

        <script>
          export default {
            data() {
                return {
                  activeComp: ''
                }
              }
          }
        </script>

################################### KeepAlive include/exclude/max  #####################################

# Con <KeepAlive> recordamos data ingresada por el usuario al alternar entre componentes, inputs,etc.
        <KeepAlive>
            <componet :is="dinamicComp"></component>
        </ KeepAlive>

# With  <KeepAlive include="CompOne">, only the 'CompOne' component will remember its state, the previous inputs.

# With <KeepAlive exclude="CompOne">, only the 'CompTwo' component will remember its state.

# With <KeepAlive :max="2">, the browser will only remember the user input of the last two visited components.



############################# teleport ###################################################################
            
            //Asi teletransporta al final del body
            <teleport to="body">
                <div >hola estoy teletransportado</div>
            </teleport>

            //asi al elemento con id=id1
            <teleport to="#id1">
                <div>Teletransportado a un id especifico del dom</div>
            </teleport>


############################## fetch ####################################################################

## Puede ser data de un json o simple texto

<template>
  <div>
    <button @click="fetchData">Fetch Data</button>
    <pre v-if="data">{{ data }}</pre>
  </div>
</template>

<script>
export default {
  data() {
    return {
      data: null,
    };
  },
  methods: {
    async fetchData() {

        //data de un json
      const response = await fetch("bigLandMammals.json");
      this.data = await response.json();


    }
  }
};
</script>


//data de una api
const response = await fetch("https://random-data-api.com/api/v2/users");